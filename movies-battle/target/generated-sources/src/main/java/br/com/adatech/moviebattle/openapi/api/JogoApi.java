/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package br.com.adatech.moviebattle.openapi.api;

import br.com.adatech.moviebattle.openapi.model.Mensagem;
import br.com.adatech.moviebattle.openapi.model.Rodada;
import br.com.adatech.moviebattle.openapi.model.ScoreBoardPosition;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-17T14:33:04.672888700+01:00[Europe/Lisbon]")
@Validated
@Api(value = "jogo", description = "the jogo API")
public interface JogoApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /jogo/escolher-opcao : Recurso responsável por iniciar uma nova rodada.
     * Recurso responsável por iniciar uma nova rodada.
     *
     * @param opcaoFilme Representa a opção de filmes. (required)
     * @return Resposta para o recurso escolher uma opção. (status code 200)
     *         or  (status code 400)
     *         or  (status code 500)
     */
    @ApiOperation(value = "Recurso responsável por iniciar uma nova rodada.", nickname = "escolherOpcao", notes = "Recurso responsável por iniciar uma nova rodada.", response = Mensagem.class, authorizations = {
        
        @Authorization(value = "BasicAuth")
         }, tags={ "jogo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Resposta para o recurso escolher uma opção.", response = Mensagem.class),
        @ApiResponse(code = 400, message = "", response = Mensagem.class),
        @ApiResponse(code = 500, message = "", response = Mensagem.class) })
    @GetMapping(
        value = "/jogo/escolher-opcao",
        produces = { "application/json" }
    )
    default ResponseEntity<Mensagem> escolherOpcao(@NotNull @ApiParam(value = "Representa a opção de filmes.", required = true) @Valid @RequestParam(value = "opcaoFilme", required = true) Integer opcaoFilme) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"msg\" : \"Mensagem sistema\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /jogo/gamOver : Encerra o jogo e informa o score atual
     * Finaliza a partida.
     *
     * @return Resposta para o recurso escolher uma opção. (status code 200)
     *         or  (status code 500)
     */
    @ApiOperation(value = "Encerra o jogo e informa o score atual", nickname = "finalizar", notes = "Finaliza a partida.", response = Mensagem.class, authorizations = {
        
        @Authorization(value = "BasicAuth")
         }, tags={ "jogo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Resposta para o recurso escolher uma opção.", response = Mensagem.class),
        @ApiResponse(code = 500, message = "", response = Mensagem.class) })
    @GetMapping(
        value = "/jogo/gamOver",
        produces = { "application/json" }
    )
    default ResponseEntity<Mensagem> finalizar() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"msg\" : \"Mensagem sistema\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /jogo/scoreboard : Recurso responsável por rankear os melhores jogadores.
     * Recurso responsável por rankear os melhores jogadores.
     *
     * @return Array de posições dos melhores jogadores. (status code 200)
     *         or  (status code 500)
     */
    @ApiOperation(value = "Recurso responsável por rankear os melhores jogadores.", nickname = "getScoreBoard", notes = "Recurso responsável por rankear os melhores jogadores.", response = ScoreBoardPosition.class, responseContainer = "List", authorizations = {
        
        @Authorization(value = "BasicAuth")
         }, tags={ "jogo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Array de posições dos melhores jogadores.", response = ScoreBoardPosition.class, responseContainer = "List"),
        @ApiResponse(code = 500, message = "", response = Mensagem.class) })
    @GetMapping(
        value = "/jogo/scoreboard",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ScoreBoardPosition>> getScoreBoard() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"nome\" : \"User1\", \"pontuacao\" : 900, \"posicao\" : 1 }, { \"nome\" : \"Ricardo\", \"pontuacao\" : 800, \"posicao\" : 2 }, { \"nome\" : \"David\", \"pontuacao\" : 600, \"posicao\" : 3 }, { \"nome\" : \"Elias\", \"pontuacao\" : 500, \"posicao\" : 4 }, { \"nome\" : \"Francisco\", \"pontuacao\" : 400, \"posicao\" : 5 }, { \"nome\" : \"Helena\", \"pontuacao\" : 300, \"posicao\" : 6 }, { \"nome\" : \"Fabi\", \"pontuacao\" : 200, \"posicao\" : 7 }, { \"nome\" : \"Gabriel\", \"pontuacao\" : 100, \"posicao\" : 8 }, { \"nome\" : \"Carlos\", \"pontuacao\" : 50, \"posicao\" : 9 }, { \"nome\" : \"Gabriel\", \"pontuacao\" : 0, \"posicao\" : 10 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /jogo/iniciar : Recurso responsável por criar um novo jogo.
     *
     * @return Resposta para o recurso escolher uma opção. (status code 201)
     *         or  (status code 500)
     */
    @ApiOperation(value = "Recurso responsável por criar um novo jogo.", nickname = "iniciarJogo", notes = "", response = Mensagem.class, authorizations = {
        
        @Authorization(value = "BasicAuth")
         }, tags={ "jogo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Resposta para o recurso escolher uma opção.", response = Mensagem.class),
        @ApiResponse(code = 500, message = "", response = Mensagem.class) })
    @PostMapping(
        value = "/jogo/iniciar",
        produces = { "application/json" }
    )
    default ResponseEntity<Mensagem> iniciarJogo() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"msg\" : \"Mensagem sistema\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /jogo/iniciar-rodada : Inicia uma nova rodada
     * Inicia uma nova rodada
     *
     * @return Objeto que representa uma nova rodada. (status code 200)
     *         or  (status code 500)
     */
    @ApiOperation(value = "Inicia uma nova rodada", nickname = "iniciarNovaRodada", notes = "Inicia uma nova rodada", response = Rodada.class, authorizations = {
        
        @Authorization(value = "BasicAuth")
         }, tags={ "jogo", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Objeto que representa uma nova rodada.", response = Rodada.class),
        @ApiResponse(code = 500, message = "", response = Mensagem.class) })
    @GetMapping(
        value = "/jogo/iniciar-rodada",
        produces = { "application/json" }
    )
    default ResponseEntity<Rodada> iniciarNovaRodada() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"User1 deve escolher entre os dois filmes, qual deles você acha que tem a maior pontuação? Filme 1 ou Filme 2?\", \"movies\" : [ { \"title\" : \"O Pesadelo 3\", \"posicao\" : 1, \"plot\" : \"Um filme que vai te deixar acordado\" }, { \"title\" : \"Refém de uma vida\", \"posicao\" : 2, \"plot\" : \"Um filme que vai te deixar refém da vida inteira\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
